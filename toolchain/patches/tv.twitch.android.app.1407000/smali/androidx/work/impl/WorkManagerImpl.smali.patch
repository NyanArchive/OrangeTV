diff --git a/smali/androidx/work/impl/WorkManagerImpl.smali b/smali/androidx/work/impl/WorkManagerImpl.smali
--- a/smali/androidx/work/impl/WorkManagerImpl.smali
+++ b/smali/androidx/work/impl/WorkManagerImpl.smali
@@ -1046,3 +1046,223 @@
 
     return-void
 .end method
+
+.method public enqueueUniqueWork(Ljava/lang/String;Landroidx/work/ExistingWorkPolicy;Ljava/util/List;)Landroidx/work/Operation;
+    .registers 5
+    .param p1, "uniqueWorkName"    # Ljava/lang/String;
+    .param p2, "existingWorkPolicy"    # Landroidx/work/ExistingWorkPolicy;
+    .annotation system Ldalvik/annotation/Signature;
+        value = {
+            "(",
+            "Ljava/lang/String;",
+            "Landroidx/work/ExistingWorkPolicy;",
+            "Ljava/util/List<",
+            "Landroidx/work/OneTimeWorkRequest;",
+            ">;)",
+            "Landroidx/work/Operation;"
+        }
+    .end annotation
+
+    .line 401
+    .local p3, "work":Ljava/util/List;, "Ljava/util/List<Landroidx/work/OneTimeWorkRequest;>;"
+    new-instance v0, Landroidx/work/impl/WorkContinuationImpl;
+
+    invoke-direct {v0, p0, p1, p2, p3}, Landroidx/work/impl/WorkContinuationImpl;-><init>(Landroidx/work/impl/WorkManagerImpl;Ljava/lang/String;Landroidx/work/ExistingWorkPolicy;Ljava/util/List;)V
+
+    invoke-virtual {v0}, Landroidx/work/impl/WorkContinuationImpl;->enqueue()Landroidx/work/Operation;
+
+    move-result-object v0
+
+    return-object v0
+.end method
+
+.method public createCancelPendingIntent(Ljava/util/UUID;)Landroid/app/PendingIntent;
+    .registers 6
+    .param p1, "id"    # Ljava/util/UUID;
+    .annotation system Ldalvik/annotation/MethodParameters;
+        accessFlags = {
+            0x0
+        }
+        names = {
+            "id"
+        }
+    .end annotation
+
+    .line 479
+    iget-object v0, p0, Landroidx/work/impl/WorkManagerImpl;->mContext:Landroid/content/Context;
+
+    invoke-virtual {p1}, Ljava/util/UUID;->toString()Ljava/lang/String;
+
+    move-result-object v1
+
+    invoke-static {v0, v1}, Landroidx/work/impl/foreground/SystemForegroundDispatcher;->createCancelWorkIntent(Landroid/content/Context;Ljava/lang/String;)Landroid/content/Intent;
+
+    move-result-object v0
+
+    .line 480
+    .local v0, "intent":Landroid/content/Intent;
+    const/high16 v1, 0x8000000
+
+    .line 481
+    .local v1, "flags":I
+    invoke-static {}, Landroidx/core/os/BuildCompat;->isAtLeastS()Z
+
+    move-result v2
+
+    if-eqz v2, :cond_15
+
+    .line 482
+    const/high16 v2, 0x2000000
+
+    or-int/2addr v1, v2
+
+    .line 484
+    :cond_15
+    iget-object v2, p0, Landroidx/work/impl/WorkManagerImpl;->mContext:Landroid/content/Context;
+
+    const/4 v3, 0x0
+
+    invoke-static {v2, v3, v0, v1}, Landroid/app/PendingIntent;->getService(Landroid/content/Context;ILandroid/content/Intent;I)Landroid/app/PendingIntent;
+
+    move-result-object v2
+
+    return-object v2
+.end method
+
+.method public beginUniqueWork(Ljava/lang/String;Landroidx/work/ExistingWorkPolicy;Ljava/util/List;)Landroidx/work/WorkContinuation;
+    .registers 6
+    .param p1, "uniqueWorkName"    # Ljava/lang/String;
+    .param p2, "existingWorkPolicy"    # Landroidx/work/ExistingWorkPolicy;
+    .annotation system Ldalvik/annotation/MethodParameters;
+        accessFlags = {
+            0x0,
+            0x0,
+            0x0
+        }
+        names = {
+            "uniqueWorkName",
+            "existingWorkPolicy",
+            "work"
+        }
+    .end annotation
+
+    .annotation system Ldalvik/annotation/Signature;
+        value = {
+            "(",
+            "Ljava/lang/String;",
+            "Landroidx/work/ExistingWorkPolicy;",
+            "Ljava/util/List<",
+            "Landroidx/work/OneTimeWorkRequest;",
+            ">;)",
+            "Landroidx/work/WorkContinuation;"
+        }
+    .end annotation
+
+    .line 397
+    .local p3, "work":Ljava/util/List;, "Ljava/util/List<Landroidx/work/OneTimeWorkRequest;>;"
+    invoke-interface {p3}, Ljava/util/List;->isEmpty()Z
+
+    move-result v0
+
+    if-nez v0, :cond_c
+
+    .line 401
+    new-instance v0, Landroidx/work/impl/WorkContinuationImpl;
+
+    invoke-direct {v0, p0, p1, p2, p3}, Landroidx/work/impl/WorkContinuationImpl;-><init>(Landroidx/work/impl/WorkManagerImpl;Ljava/lang/String;Landroidx/work/ExistingWorkPolicy;Ljava/util/List;)V
+
+    return-object v0
+
+    .line 398
+    :cond_c
+    new-instance v0, Ljava/lang/IllegalArgumentException;
+
+    const-string v1, "beginUniqueWork needs at least one OneTimeWorkRequest."
+
+    invoke-direct {v0, v1}, Ljava/lang/IllegalArgumentException;-><init>(Ljava/lang/String;)V
+
+    throw v0
+.end method
+
+.method public cancelUniqueWork(Ljava/lang/String;)Landroidx/work/Operation;
+    .registers 4
+    .param p1, "uniqueWorkName"    # Ljava/lang/String;
+    .annotation system Ldalvik/annotation/MethodParameters;
+        accessFlags = {
+            0x0
+        }
+        names = {
+            "uniqueWorkName"
+        }
+    .end annotation
+
+    .line 464
+    const/4 v0, 0x1
+
+    invoke-static {p1, p0, v0}, Landroidx/work/impl/utils/CancelWorkRunnable;->forName(Ljava/lang/String;Landroidx/work/impl/WorkManagerImpl;Z)Landroidx/work/impl/utils/CancelWorkRunnable;
+
+    move-result-object v0
+
+    .line 465
+    .local v0, "runnable":Landroidx/work/impl/utils/CancelWorkRunnable;
+    iget-object v1, p0, Landroidx/work/impl/WorkManagerImpl;->mWorkTaskExecutor:Landroidx/work/impl/utils/taskexecutor/TaskExecutor;
+
+    invoke-interface {v1, v0}, Landroidx/work/impl/utils/taskexecutor/TaskExecutor;->executeOnBackgroundThread(Ljava/lang/Runnable;)V
+
+    .line 466
+    invoke-virtual {v0}, Landroidx/work/impl/utils/CancelWorkRunnable;->getOperation()Landroidx/work/Operation;
+
+    move-result-object v1
+
+    return-object v1
+.end method
+
+.method public getWorkInfosForUniqueWork(Ljava/lang/String;)Lcom/google/common/util/concurrent/ListenableFuture;
+    .registers 4
+    .param p1, "uniqueWorkName"    # Ljava/lang/String;
+    .annotation system Ldalvik/annotation/MethodParameters;
+        accessFlags = {
+            0x0
+        }
+        names = {
+            "uniqueWorkName"
+        }
+    .end annotation
+
+    .annotation system Ldalvik/annotation/Signature;
+        value = {
+            "(",
+            "Ljava/lang/String;",
+            ")",
+            "Lcom/google/common/util/concurrent/ListenableFuture<",
+            "Ljava/util/List<",
+            "Landroidx/work/WorkInfo;",
+            ">;>;"
+        }
+    .end annotation
+
+    .line 578
+    nop
+
+    .line 579
+    invoke-static {p0, p1}, Landroidx/work/impl/utils/StatusRunnable;->forUniqueWork(Landroidx/work/impl/WorkManagerImpl;Ljava/lang/String;)Landroidx/work/impl/utils/StatusRunnable;
+
+    move-result-object v0
+
+    .line 580
+    .local v0, "runnable":Landroidx/work/impl/utils/StatusRunnable;, "Landroidx/work/impl/utils/StatusRunnable<Ljava/util/List<Landroidx/work/WorkInfo;>;>;"
+    iget-object v1, p0, Landroidx/work/impl/WorkManagerImpl;->mWorkTaskExecutor:Landroidx/work/impl/utils/taskexecutor/TaskExecutor;
+
+    invoke-interface {v1}, Landroidx/work/impl/utils/taskexecutor/TaskExecutor;->getBackgroundExecutor()Landroidx/work/impl/utils/SerialExecutor;
+
+    move-result-object v1
+
+    invoke-virtual {v1, v0}, Landroidx/work/impl/utils/SerialExecutor;->execute(Ljava/lang/Runnable;)V
+
+    .line 581
+    invoke-virtual {v0}, Landroidx/work/impl/utils/StatusRunnable;->getFuture()Lcom/google/common/util/concurrent/ListenableFuture;
+
+    move-result-object v1
+
+    return-object v1
+.end method
